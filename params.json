{"name":"MonkeyMan","tagline":"A nice perl5 library for interacting with Apache CloudStack with some cool tools included","body":"monkeyman\r\n=========\r\n\r\n> Aye-aye-aye\r\n> Aye-aye-aye\r\n> Hugging up the big monkey man!\r\n\r\nIf you administrating CloudStack installations, you may find it useful.\r\nIf you love Perl5, you may consider it interesting.\r\n\r\nI'm developing a library and some set of tools for managing\r\nCloudStack-based infrastructure from the command line. It's going to\r\nbecome a smart system for doing lots of administrative tasks, so it's\r\nonly the beginning for now. :-)\r\n\r\nBut what we have at the moment?\r\n\r\nAs about tools, we can do such things from UNIX-shell...\r\n\r\nFor example, let's assume you want to check state of the VM having\r\na certain IP-address AND being a member of a certain domain:\r\n\r\n```\r\nadmin> mm_vm_info has_ipaddress=10.1.1.127 has_domain=A201306\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<listvirtualmachinesresponse>\r\n  <virtualmachine>\r\n    <id>99b885d4-70d7-4efc-8a4e-53417893fb19</id>\r\n    <name>99b885d4-70d7-4efc-8a4e-53417893fb19</name>\r\n\t[...]\r\n```\r\n\r\nOr, if you want to, you can get certain parameters of this output:\r\n\r\n```\r\nadmin> mm_vm_info has_ipaddress=10.1.1.127 has_domain=A201306 \\\r\n        -x //state -x //hostname -x //instancename\r\n\r\n<state>Running</state>\r\n<hostname>h2.c1.p1.z1.tucha13.net</hostname>\r\n<instancename>i-51-135-VM</instancename>\r\n```\r\n\r\nWant to get rid of markup to use the result for something else?\r\n\r\n```\r\nadmin> ping $(mm_vm_info has_id=99b885d4-70d7-4efc-8a4e-53417893fb19\r\n        -x //nic/ipaddress -s -s)\r\n\r\nPING 10.1.1.127 (10.1.1.127) 56(84) bytes of data.\r\n\t[...]\r\n\r\n```\r\n\r\nYou can reset the VM found by your desired criterias:\r\n\r\n```\r\nadmin> mm_vm_reset has_instancename=i-13-666-VM\r\n```\r\n\r\nWant to listen to someone's network interface? No problem.\r\n\r\n```\r\nadmin> mm_vm_tcpdump has_ipaddress=10.1.1.253\r\n\r\ntcpdump: WARNING: vnet17: no IPv4 address assigned\r\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\r\nlistening on vnet17, link-type EN10MB (Ethernet), capture size 65535 bytes\r\n15:21:01.845886 IP 10.1.1.1.36686 > 10.1.1.253.imaps: Flags [S], seq 316746440, win 14600, options [mss 1460,sackOK,TS val 1959872931 ecr 0,nop,wscale 6], length 0\r\n15:21:01.846023 IP 10.1.1.253.imaps > 10.1.1.1.36686: Flags [S.], seq 2234071684, ack 316746441, win 14480, options [mss 1460,sackOK,TS val 2579908884 ecr 1959872931,nop,wscale 6], length 0\r\n```\r\n\r\n^^^ The script just have found the hostname and the instance name,\r\nlogged into the host, analyzed output of \"virsh dumpxml ...\", found the\r\ninterface's name (vnet17) and launched tcpdump.\r\n\r\nAnd you can use all these things not only from the command-line, as you\r\ncan use the object oriented library using all these things from your own\r\nPerl5 scripts.\r\n\r\nLet's assume you want to find and load all the information about some\r\ndomain:\r\n\r\n```perl\r\n    my $domain = eval { MonkeyMan::CloudStack::Elements::Domain->new(\r\n\tmm          => $mm,\r\n\tload_dom    => {\r\n\t    conditions  => {\r\n\t\tpath        => 'ROOT/CUSTOMERS/ZALOOPA'\r\n\t    }\r\n\t}\r\n    )};\r\n\r\n    if($@) { $log->warn(\"Can't MonkeyMan::CloudStack::Elements::Domain->new(): $@\"); next; }\r\n```\r\n\r\nVoila, now you have the corresponding object's reference in the $domain\r\nvariable. You can do some easy tricks with that domain. It's pretty easy\r\nto get any parameter:\r\n\r\n```perl\r\n    my $domain_id = $domain->get_parameter('id');\r\n\r\n    unless(defined($domain_id)) {\r\n\t$log->warn(\"Can't get the ID of the domain\" .\r\n\t    ($domain->has_error ? (\": \" . $domain->error_message) : undef)\r\n\t);\r\n\tnext;\r\n    }\r\n```\r\n\r\nWhat if you want to get all volumes belongs to this domain? It's easy:\r\n\r\n```perl\r\n    my $volumz = $domain->find_related_to_me(\"volume\");\r\n    $log->logdie($domain->error_message) unless defined($volumz);\r\n```\r\n\r\nNo kidding, you have the reference to the list of XML::LibXML documents\r\nwho have the <domainid> parameter corresponding to this domain. You can\r\neasily initialize them as objects to do other cool things with these\r\nvolumes:\r\n\r\n```perl\r\n    foreach my $volume_dom (@{ $volumz }) {\r\n    \r\n    my $volume = eval { MonkeyMan::CloudStack::Elements::Volume->new(\r\n        mm          => $mm,\r\n        load_dom    => {\r\n    \t dom        => $volume_dom   # the XML document\r\n        }\r\n    ); };\r\n    if($@) { $log->warn(\"Can't MonkeyMan::CloudStack::Elements::Volume->new(): $@\"); next; }\r\n```\r\n\r\nOh, well, too much text... :-)\r\n\r\nWould you like to use it? You're strongly welcome:\r\nhttps://github.com/melnik13/monkeyman/\r\n\r\nWould you like to join the project and develop it with me? Feel free to\r\ndrop me a line: v.melnik@tucha.ua\r\n\r\n![Nice drawing by D.Kolesnichenko for Tucha.UA](http://tucha.ua/wp-content/uploads/2013/08/monk.png)\r\n\r\nP.S. CloudStack have such a nice API!","google":"UA-52432048-1","note":"Don't delete this file! It's used internally to help with page regeneration."}